#include <iostream>
#include <vector>
#include <algorithm>

/**
 Implements the in-place removal of a specific value from a vector. This solution utilizes the two-pointer approach, where one pointer ('i') iterates 
 through all elements (read head), and another pointer ('k') tracks the position where the next non-matching element should be placed (write head).
 The function modifies the input vector in-place such that the first k elements contain all elements from 'nums' that are not equal to 'val'.
 */
class Solution {
public:
    /**
     * Removes all instances of 'val' from 'nums' in-place.
     * * @param nums The vector of integers to modify. Modified in-place.
     * @param val The value to remove from the vector.
     * @return int The number of elements in 'nums' which are not equal to 'val'.
     */
    int removeElement(vector<int>& nums, int val) {
        // 'k' acts as the write head: it tracks the next position to insert 
        // an element that is *not* equal to 'val'.
        int k = 0;
        
        // 'i' acts as the read head: it iterates through all elements of the vector.
        for(int i = 0; i < nums.size(); i++){ 
            // Check if the current element is *not* the value we want to remove.
            if(nums[i] != val){ 
                // If it's a keeper, move it to the position 'k'.
                nums[k] = nums[i]; 
                
                // Advance the write head to prepare for the next keeper.
                k++;
            }
        }
        
        // 'k' now represents the length of the new array segment.
        return k;
    }
};


int main() {
    Solution sol;
    
    // Test Case 1
    vector<int> nums1 = {3, 2, 2, 3};
    int val1 = 3;
    int k1 = sol.removeElement(nums1, val1);
    
    cout << "Test Case 1:" << endl;
    cout << "Original array: [3, 2, 2, 3], Value to remove: " << val1 << endl;
    cout << "New length (k): " << k1 << endl;
    cout << "Elements remaining in the first " << k1 << " slots: [";
    for (int i = 0; i < k1; ++i) {
        cout << nums1[i] << (i == k1 - 1 ? "" : ", ");
    }
    cout << "]" << endl;
    cout << "---" << endl;

    // Test Case 2
    vector<int> nums2 = {0, 1, 2, 2, 3, 0, 4, 2};
    int val2 = 2;
    int k2 = sol.removeElement(nums2, val2);

    cout << "Test Case 2:" << endl;
    cout << "Original array: [0, 1, 2, 2, 3, 0, 4, 2], Value to remove: " << val2 << endl;
    cout << "New length (k): " << k2 << endl;
    cout << "Elements remaining in the first " << k2 << " slots: [";
    for (int i = 0; i < k2; ++i) {
        cout << nums2[i] << (i == k2 - 1 ? "" : ", ");
    }
    cout << "]" << endl;
    
    return 0;
}
